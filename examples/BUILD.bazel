load("@rules_cc//cc:defs.bzl", "cc_test")
load(
    "//fire/starlark:parameters.bzl",
    "cc_parameter_library",
    "go_parameter_library",
    "java_parameter_library",
    "parameter_library",
    "python_parameter_library",
)
load("//fire/starlark:requirements.bzl", "requirement_library")
load(":vehicle_params.bzl", "VEHICLE_PARAMS")

# Define parameters (loaded from separate .bzl file for better organization)
# Namespace is auto-derived from package path: examples -> examples
parameter_library(
    name = "vehicle_params_header",
    parameters = VEHICLE_PARAMS,
)

# Create CC library from parameters
cc_parameter_library(
    name = "vehicle_params_cc",
    parameter_library = ":vehicle_params_header",
)

# Generate Python parameters
# Auto-derived: examples -> examples (Python module)
python_parameter_library(
    name = "vehicle_params_py",
    parameters = VEHICLE_PARAMS,
)

# Generate Java parameters
# Auto-derived: examples -> examples.examples (with prefix)
java_parameter_library(
    name = "vehicle_params_java",
    class_name = "VehicleParams",
    package_prefix = "com.example",  # Results in: com.example.examples
    parameters = VEHICLE_PARAMS,
)

# Generate Go parameters
# Auto-derived: examples -> package examples
go_parameter_library(
    name = "vehicle_params_go",
    parameters = VEHICLE_PARAMS,
)

# Test that uses the generated parameters
cc_test(
    name = "vehicle_params_test",
    srcs = ["vehicle_params_test.cc"],
    deps = [":vehicle_params_cc"],
)

# Validate requirement documents
requirement_library(
    name = "vehicle_requirements",
    srcs = glob(["requirements/*.md"]),
)
